Creating a complete social learning community platform is a complex task that involves multiple components such as user authentication, content management, real-time interactions, and more. Below is a simplified version of a social learning community using Node.js, Express, MongoDB, and EJS for rendering views. This example includes user authentication, posting content, and commenting on posts.
Prerequisites

    Node.js and npm installed.

    MongoDB installed and running.

Project Setup

    Initialize the project:
    bash
    Copy

    mkdir social-learning-community
    cd social-learning-community
    npm init -y

    Install dependencies:
    bash
    Copy

    npm install express mongoose ejs bcryptjs passport passport-local express-session connect-mongo dotenv

    Create the project structure:
    Copy

    social-learning-community/
    ├── config/
    │   └── db.js
    ├── models/
    │   ├── User.js
    │   ├── Post.js
    │   └── Comment.js
    ├── routes/
    │   ├── index.js
    │   ├── auth.js
    │   └── posts.js
    ├── views/
    │   ├── partials/
    │   │   ├── header.ejs
    │   │   └── footer.ejs
    │   ├── auth/
    │   │   ├── login.ejs
    │   │   └── register.ejs
    │   ├── posts/
    │   │   ├── index.ejs
    │   │   └── show.ejs
    │   └── layout.ejs
    ├── .env
    ├── app.js
    └── server.js

Code Implementation

    config/db.js - Database connection:
    javascript
    Copy

    const mongoose = require('mongoose');

    const connectDB = async () => {
        try {
            const conn = await mongoose.connect(process.env.MONGO_URI, {
                useNewUrlParser: true,
                useUnifiedTopology: true,
            });
            console.log(`MongoDB Connected: ${conn.connection.host}`);
        } catch (error) {
            console.error(`Error: ${error.message}`);
            process.exit(1);
        }
    };

    module.exports = connectDB;

    models/User.js - User model:
    javascript
    Copy

    const mongoose = require('mongoose');
    const bcrypt = require('bcryptjs');

    const UserSchema = new mongoose.Schema({
        username: { type: String, required: true, unique: true },
        password: { type: String, required: true },
    });

    UserSchema.pre('save', async function (next) {
        if (this.isModified('password')) {
            this.password = await bcrypt.hash(this.password, 8);
        }
        next();
    });

    module.exports = mongoose.model('User', UserSchema);

    models/Post.js - Post model:
    javascript
    Copy

    const mongoose = require('mongoose');

    const PostSchema = new mongoose.Schema({
        title: { type: String, required: true },
        content: { type: String, required: true },
        author: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
        comments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Comment' }],
        createdAt: { type: Date, default: Date.now },
    });

    module.exports = mongoose.model('Post', PostSchema);

    models/Comment.js - Comment model:
    javascript
    Copy

    const mongoose = require('mongoose');

    const CommentSchema = new mongoose.Schema({
        content: { type: String, required: true },
        author: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
        post: { type: mongoose.Schema.Types.ObjectId, ref: 'Post', required: true },
        createdAt: { type: Date, default: Date.now },
    });

    module.exports = mongoose.model('Comment', CommentSchema);

    routes/auth.js - Authentication routes:
    javascript
    Copy

    const express = require('express');
    const passport = require('passport');
    const User = require('../models/User');
    const router = express.Router();

    router.get('/register', (req, res) => {
        res.render('auth/register');
    });

    router.post('/register', async (req, res) => {
        try {
            const { username, password } = req.body;
            const user = new User({ username, password });
            await user.save();
            res.redirect('/auth/login');
        } catch (error) {
            res.status(400).send(error.message);
        }
    });

    router.get('/login', (req, res) => {
        res.render('auth/login');
    });

    router.post('/login', passport.authenticate('local', {
        successRedirect: '/posts',
        failureRedirect: '/auth/login',
    }));

    router.get('/logout', (req, res) => {
        req.logout();
        res.redirect('/');
    });

    module.exports = router;

    routes/posts.js - Post routes:
    javascript
    Copy

    const express = require('express');
    const Post = require('../models/Post');
    const Comment = require('../models/Comment');
    const router = express.Router();

    router.get('/', async (req, res) => {
        const posts = await Post.find().populate('author');
        res.render('posts/index', { posts });
    });

    router.get('/new', (req, res) => {
        res.render('posts/new');
    });

    router.post('/', async (req, res) => {
        const { title, content } = req.body;
        const post = new Post({ title, content, author: req.user._id });
        await post.save();
        res.redirect('/posts');
    });

    router.get('/:id', async (req, res) => {
        const post = await Post.findById(req.params.id).populate('author').populate('comments');
        res.render('posts/show', { post });
    });

    router.post('/:id/comments', async (req, res) => {
        const { content } = req.body;
        const comment = new Comment({ content, author: req.user._id, post: req.params.id });
        await comment.save();
        const post = await Post.findById(req.params.id);
        post.comments.push(comment._id);
        await post.save();
        res.redirect(`/posts/${req.params.id}`);
    });

    module.exports = router;

    routes/index.js - Main routes:
    javascript
    Copy

    const express = require('express');
    const router = express.Router();

    router.get('/', (req, res) => {
        res.render('index');
    });

    module.exports = router;

    views/layout.ejs - Layout template:
    html
    Copy

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Social Learning Community</title>
    </head>
    <body>
        <%- include('partials/header') %>
        <%- body %>
        <%- include('partials/footer') %>
    </body>
    </html>

Run HTML

views/partials/header.ejs - Header partial:
html
Copy

<header>
    <h1>Social Learning Community</h1>
    <nav>
        <a href="/">Home</a>
        <a href="/posts">Posts</a>
        <% if (req.user) { %>
            <a href="/auth/logout">Logout</a>
        <% } else { %>
            <a href="/auth/login">Login</a>
            <a href="/auth/register">Register</a>
        <% } %>
    </nav>
</header>

Run HTML

views/partials/footer.ejs - Footer partial:
html
Copy

<footer>
    <p>&copy; 2023 Social Learning Community</p>
</footer>

Run HTML

views/auth/login.ejs - Login view:
html
Copy

<h2>Login</h2>
<form action="/auth/login" method="POST">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required>
    <button type="submit">Login</button>
</form>

Run HTML

views/auth/register.ejs - Register view:
html
Copy

<h2>Register</h2>
<form action="/auth/register" method="POST">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required>
    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required>
    <button type="submit">Register</button>
</form>

Run HTML

views/posts/index.ejs - Posts index view:
html
Copy

<h2>Posts</h2>
<a href="/posts/new">New Post</a>
<ul>
    <% posts.forEach(post => { %>
        <li>
            <h3><%= post.title %></h3>
            <p><%= post.content %></p>
            <p>Author: <%= post.author.username %></p>
            <a href="/posts/<%= post._id %>">View</a>
        </li>
    <% }) %>
</ul>

Run HTML

views/posts/show.ejs - Post show view:
html
Copy

<h2><%= post.title %></h2>
<p><%= post.content %></p>
<p>Author: <%= post.author.username %></p>
<h3>Comments</h3>
<ul>
    <% post.comments.forEach(comment => { %>
        <li>
            <p><%= comment.content %></p>
            <p>Author: <%= comment.author.username %></p>
        </li>
    <% }) %>
</ul>
<form action="/posts/<%= post._id %>/comments" method="POST">
    <label for="content">Comment:</label>
    <textarea id="content" name="content" required></textarea>
    <button type="submit">Submit</button>
</form>

    Run HTML

    app.js - Main application setup:
    javascript
    Copy

    const express = require('express');
    const mongoose = require('mongoose');
    const passport = require('passport');
    const session = require('express-session');
    const MongoStore = require('connect-mongo');
    const connectDB = require('./config/db');
    const User = require('./models/User');
    const routes = require('./routes');
    const authRoutes = require('./routes/auth');
    const postRoutes = require('./routes/posts');

    require('dotenv').config();

    const app = express();

    // Connect to MongoDB
    connectDB();

    // Middleware
    app.use(express.urlencoded({ extended: true }));
    app.use(express.json());
    app.use(session({
        secret: process.env.SESSION_SECRET,
        resave: false,
        saveUninitialized: false,
        store: MongoStore.create({ mongoUrl: process.env.MONGO_URI }),
    }));
    app.use(passport.initialize());
    app.use(passport.session());

    // Passport config
    passport.use(User.createStrategy());
    passport.serializeUser(User.serializeUser());
    passport.deserializeUser(User.deserializeUser());

    // Routes
    app.use('/', routes);
    app.use('/auth', authRoutes);
    app.use('/posts', postRoutes);

    // View engine setup
    app.set('view engine', 'ejs');
    app.set('views', './views');

    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`Server running on port ${PORT}`);
    });

    server.js - Entry point:
    javascript
    Copy

    const app = require('./app');

    .env - Environment variables:
    Copy

    MONGO_URI=mongodb://localhost:27017/social_learning_community
    SESSION_SECRET=your-secret-key

Running the Application

    Start MongoDB:
    bash
    Copy

    mongod

    Start the server:
    bash
    Copy

    node server.js

    Open your browser and navigate to http://localhost:3000.

Conclusion

This is a basic implementation of a social learning community. You can expand it by adding features like user profiles, upvoting/downvoting posts, real-time notifications, and more. Additionally, consider using a front-end framework like React or Vue.js for a more dynamic user experience.
New chat
